{"version":3,"sources":["Header.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","icon","size","spin","Card","src","this","props","imgurl","alt","fname","lname","handle","class","href","color","country","rating","rank","Component","library","add","faCheckSquare","faCoffee","faCheck","faCode","faUser","App","state","input","user","handleChange","e","setState","target","value","handleSubmit","preventDefault","axios","get","then","res","data","result","onSubmit","type","placeholder","onChange","titlePhoto","firstName","lastName","maxRating","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uSAYeA,EATD,WACV,OACI,yBAAKC,UAAU,UACX,kBAAC,IAAD,CAAiBC,KAAK,OAAOC,KAAK,KAAKC,MAAI,IAC3C,0CC8BGC,G,6KA5BP,OACI,yBAAKJ,UAAU,WACX,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,eACX,yBAAKA,UAAU,UACX,yBAAKK,IAAKC,KAAKC,MAAMC,OAAQC,IAAI,MAErC,yBAAKT,UAAU,QAAQM,KAAKC,MAAMG,MAAlC,IAA0CJ,KAAKC,MAAMI,OAErD,yBAAKX,UAAU,UAAf,IAA0BM,KAAKC,MAAMK,SAEzC,yBAAKZ,UAAU,kBACf,yBAAKa,MAAM,QACP,uBAAGC,KAAI,yCAAoCR,KAAKC,MAAMK,SAAU,kBAAC,IAAD,CAAiBX,KAAK,OAAOD,UAAU,IAAIe,MAAM,WAEjH,yBAAKF,MAAM,WAAWP,KAAKC,MAAMS,QAAjC,IAA0C,0CAC1C,yBAAKH,MAAM,WACX,yBAAKA,MAAM,UAAUP,KAAKC,MAAMU,OAAhC,IAAwC,yCACxC,yBAAKJ,MAAM,WACX,yBAAKA,MAAM,QAAQP,KAAKC,MAAMW,KAA9B,IAAoC,8C,GAvBrCC,c,+BCGnBC,IAAQC,IAAKC,IAAeC,IAAUC,IAASC,IAAQC,K,IA0CxCC,E,4MAtCbC,MAAM,CACJC,MAAM,GACNC,KAAK,I,EAGTC,aAAe,SAACC,GACd,EAAKC,SAAS,CACVJ,MAAOG,EAAEE,OAAOC,S,EAGtBC,aAAe,SAACJ,GACdA,EAAEK,iBACFC,IAAMC,IAAN,uDAA0D,EAAKX,MAAMC,MAArE,qDACCW,MAAK,SAAAC,GACJ,EAAKR,SAAS,CACZH,KAAMW,EAAIC,KAAKC,OAAO,QAG1B,EAAKV,SAAS,CACZJ,MAAM,Q,uDAIN,OACE,6BACE,kBAAC,EAAD,MACA,yBAAK7B,UAAU,eACP,0BAAM4C,SAAUtC,KAAK8B,cACjB,2BAAOS,KAAK,OAAOC,YAAY,mCAAmCC,SAAUzC,KAAKyB,aAAcI,MAAO7B,KAAKsB,MAAMC,UAGzH,kBAAC,EAAD,CAAMZ,OAAQX,KAAKsB,MAAME,KAAKb,OAAQT,OAAQF,KAAKsB,MAAME,KAAKkB,WAAYtC,MAAOJ,KAAKsB,MAAME,KAAKmB,UAAWtC,MAAOL,KAAKsB,MAAME,KAAKoB,SAAUtC,OAAQN,KAAKsB,MAAME,KAAKlB,OAAQM,KAAMZ,KAAKsB,MAAME,KAAKZ,KAAMF,QAASV,KAAKsB,MAAME,KAAKd,QAClOmC,UAAW7C,KAAKsB,MAAME,KAAKqB,iB,GAjCrBhC,aCCEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7540a4b0.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Header =() =>{\r\n    return(\r\n        <div className='header'>\r\n            <FontAwesomeIcon icon='code' size='2x' spin />\r\n            <h1>CodeFlex</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {Component} from 'react'\r\nimport './Card.scss'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n\r\nclass Card extends Component{  \r\n    \r\n    render(){\r\n        \r\n        return(\r\n            <div className='wrapper'>\r\n                <div className='profile-card'>\r\n                <div className=\"top-section\">\r\n                    <div className='avatar'>\r\n                        <img src={this.props.imgurl} alt=''></img>\r\n                    </div>\r\n                    <div className='name'>{this.props.fname} {this.props.lname}\r\n                    </div>\r\n                    <div className='handle'>@{this.props.handle}</div>\r\n                </div>\r\n                <div className='bottom-section'>\r\n                <div class=\"link\">\r\n                    <a href={`https://codeforces.com/profile/${this.props.handle}`}><FontAwesomeIcon icon='user' className='i' color='aqua' /></a>\r\n                </div>\r\n                    <div class=\"country\">{this.props.country} <span>Country</span></div>\r\n                    <div class=\"border\"></div>\r\n                    <div class=\"Rating\">{this.props.rating} <span>Rating</span></div>\r\n                    <div class=\"border\"></div>\r\n                    <div class=\"rank\">{this.props.rank} <span>Rank</span></div>\r\n                 </div>   \r\n            </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card\r\n\r\n\r\n","import React,{Component} from 'react'\nimport './App.scss';\nimport Header from './Header'\nimport Card from './Card'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCheckSquare, faCoffee, faCheck, faCode, faUser} from '@fortawesome/free-solid-svg-icons'\nimport axios from 'axios'\n\nlibrary.add( faCheckSquare, faCoffee, faCheck, faCode, faUser)\n\n\nclass App extends Component{\n  state={\n    input:'',\n    user:''\n}\n\nhandleChange = (e) => {\n  this.setState({\n      input: e.target.value\n  })\n}\nhandleSubmit = (e) => {\n  e.preventDefault();\n  axios.get(`https://codeforces.com/api/user.info?handles=${this.state.input}&apikey=abba23cc433155235fe3d3b452ce0a79c5c30b9a`)\n  .then(res => {\n    this.setState({\n      user: res.data.result[0]\n  })\n  })\n  this.setState({\n    input:null\n  })\n}\n  render(){\n    return(\n      <div>\n        <Header />\n        <div className='search-area'>\n                <form onSubmit={this.handleSubmit}>\n                    <input type='text' placeholder='      Enter Codeforces handle...' onChange={this.handleChange} value={this.state.input}></input>\n                </form>\n            </div>\n            <Card rating={this.state.user.rating} imgurl={this.state.user.titlePhoto} fname={this.state.user.firstName} lname={this.state.user.lastName} handle={this.state.user.handle} rank={this.state.user.rank} country={this.state.user.country}\n            maxRating={this.state.user.maxRating}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}